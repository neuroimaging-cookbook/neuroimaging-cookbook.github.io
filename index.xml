<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Neuroimaging Cookbook</title><link>https://neuroimaging-cookbook.github.io/</link><description>Recent content on Neuroimaging Cookbook</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://neuroimaging-cookbook.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Using 3dcalc to create a binary mask from a parcellation scheme</title><link>https://neuroimaging-cookbook.github.io/recipes/extractmaskfromparcellation_recipe/</link><pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/extractmaskfromparcellation_recipe/</guid><description>This recipe uses 3dcalc in AFNI to output a binarized 3D image file (nifti) of a region-of-interest in a parcellation scheme that is indexed by number of parcels.
Ingredients:
AFNI&amp;gt;=20.3.03 3dcalc Example usage: This example uses the Harvard Oxford Atlas
1 2 3 4 5 6 7 #!/bin/bash ATLAS_FILENAME=&amp;#39;Harvard_Oxford_Atlas.nii.gz&amp;#39; MASK_NAME=&amp;#39;r_amygdala&amp;#39; ROI_INDEX=102 # index assigned to parcel/region of interest in atlas parcellation scheme (the index for right amygdala in Harvard Oxford atlas is 102) 3dcalc -a ${ATLAS_FILENAME} -prefix ${MASK_NAME}.</description></item><item><title>BIDS Validation Recipe</title><link>https://neuroimaging-cookbook.github.io/recipes/bids-validation-cli/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/bids-validation-cli/</guid><description>Validating BIDS formatted Datasets using bids-validator Command Line Tool This recipe uses the bids-validator v1.5.7 command line tool to verify if a specified dataset conforms to the BIDS specification [1]. There are other ways to use the bids-validator, this is just one of the methods.
This is an especially important step if you intend to uses any of the BIDS Apps [2]like fMRIPrep, MRIQC, etc [3]
Ingredients Node.js (at least version 10.</description></item><item><title>Convert DICOM files to NIFTI files</title><link>https://neuroimaging-cookbook.github.io/recipes/dcm2nii_recipe/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/dcm2nii_recipe/</guid><description>This recipe provides code for converting DICOM (.dcm) files to NIFTI (.nii) files
dcm2niix This recipe converts dicom to nifti files using the program dcm2niix https://github.com/rordenlab/dcm2niix The only required argument for dcm2niix is the location of the folder with the DICOM files to convert, which is always the final argument provided. # install dcm2niix (for mac) curl -fLO https://github.com/rordenlab/dcm2niix/releases/latest/download/dcm2niix_mac.zip # convert dicom files found in dicomdir, output to outdir dcm2niix -o ~/outdir ~/dicomdir dcm2niibatch (batch conversions) https://github.</description></item><item><title>Mask lower triangle of a Representational Dissimilarity Matrix (RDM)</title><link>https://neuroimaging-cookbook.github.io/recipes/flattenrdm_recipe/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/flattenrdm_recipe/</guid><description>This recipe takes a Representational Dissimilarity Matrix (RDM) as a square numpy array, masks the diagonal and lower triangle, and outputs a flattened numpy array of the upper triangle.
Easily adaptable for Representational Similarity Analysis (RSA), Functional/Structural Connectivity analyses, or other analyses with related pipelines with symmetric, square matrices.
Requirements:
numpy&amp;gt;=1.18.1 1 2 3 4 5 6 7 def flattenRDM(square_matrix): assert square_matrix.shape[0] == square_matrix.shape[1], &amp;#34;Must be a square numpy array&amp;#34; # mask the diagonal and lower triangle and output flattened array flattened_out = square_matrix[np.</description></item><item><title>PyDeface Recipe</title><link>https://neuroimaging-cookbook.github.io/recipes/pydeface_recipe/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/pydeface_recipe/</guid><description>Defacing Multiple Brain Imaging Modalities using PyDeface For this recipe, we are using pydeface-2.0.0.
Ingredients: A python environment with the following dependencies: FSL 6.0.2 Python 3.7.3 NumPy 1.17.1 NiBabel 2.5.1 Nipype 1.3.0-rc1 Installation: pip install pydeface Usage 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ pydeface --help # bash output -------------- pydeface 2.</description></item><item><title>Using 3dAFNItoNIFTI to convert AFNI files to NIFTI files</title><link>https://neuroimaging-cookbook.github.io/recipes/brikhead2nii_recipe/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/brikhead2nii_recipe/</guid><description>This recipe converts BRIK/HEAD (AFNI) files to NIFTI (.nii) files using 3dAFNItoNIFTI. https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dAFNItoNIFTI.html
1 2 3 #!/bin/bash 3dAFNItoNIFTI -prefix prefixname dataset</description></item><item><title>Automatically Generated Recipe</title><link>https://neuroimaging-cookbook.github.io/recipes/automatically-generated-recipe/</link><pubDate>Fri, 11 Dec 2020 12:42:29 -0500</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/automatically-generated-recipe/</guid><description>Explain briefly what the recipe does. Explain briefly how the recipe works. Provide a citation and link to documentation of any third party software. Provide the version of the software/package Use bullet points for your recipe's explanation. Try to explain everything briefly but clearly. To format code, add it between a pair of 3 ticks (`)
1 2 3 def function_name(args): # code return 0 1 function_name(val) # result</description></item></channel></rss>